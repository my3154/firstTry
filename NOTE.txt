mkdir 01
linux 命令，创建新文件夹📂，可在git下使用

VIM

ll 查看当前目录下所有非隐藏文件

ls -la查看此目录下所有文件(包括隐藏的)

git init 创建本地git库

设置签名
    用户名 || Email地址 注意，此处设置的签名和GITHUB无关!!!只是为了区别开发者身份
    项目/仓库级别：在有.git文件内的范围生效
    git config user.name My3154
    系统用户级别：登录当前操作系统的范围 就近原则优先用项目级别
    git config --global user.name My3154
    信息会保存在.git下的config文件内

git status 
    查询此文件夹下的文件状态

git add 文件名 (可使用’  ‘来快速补充)

$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   NOTE.txt


git rm --cached 文件名 从缓冲区中移除文件

git commit 文件名 提交文件

Vim编译器 :wq 退出

$ git commit NOTE.txt
hint: Waiting for your editor to close the file...       0 [sig] bash 1313! sigpacket::process: Suppressing signal 18 to win32 process (pid 33844)


$ git commit NOTE.txt
unknown option: -f
usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
[master (root-commit) 7bf716a] My first try on GIT
 1 file changed, 35 insertions(+)
 create mode 100644 NOTE.txt


$ git status
On branch master
nothing to commit, working tree clean

$ vim NOTE.txt  使用Vim打开文件

修改文件以后  modified->修改
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   NOTE.txt 

no changes added to commit (use "git add" and/or "git commit -a")


git commit -m "写入提交通知的内容" 文件名

git log 查看版本的历史记录 <时间由先到后>
(HEAD -> master) 像一个指针指向当前,版本操作就是移动这个指针

$ git log
commit f7208b3e1180f5cbca228343edaed5f20061f610 (HEAD -> master)
Author: My3154 <1259706931@qq.com>
Date:   Wed Oct 20 16:17:30 2021 +0800

     A number of commit

commit bb67d0909a56968bc18ab2662d0dddd3703e852e
Author: My3154 <1259706931@qq.com>
Date:   Wed Oct 20 16:10:57 2021 +0800

    My commit here

commit 7bf716a72d378c6e023afb040258e45bc4a66a11
Author: My3154 <1259706931@qq.com>
Date:   Wed Oct 20 16:05:14 2021 +0800

    My first try on GIT


git log --pretty=oneline 以一种优雅的方式显示log
或者 git log --oneline 会使得前面的哈希值只显示一部分但是更短
$ git log --pretty=oneline
f7208b3e1180f5cbca228343edaed5f20061f610 (HEAD -> master)  A number of commit
bb67d0909a56968bc18ab2662d0dddd3703e852e My commit here
7bf716a72d378c6e023afb040258e45bc4a66a11 My first try on GIT

git reflog 看出要移动几步才能到达所要的版本
$ git reflog
f7208b3 (HEAD -> master) HEAD@{0}: commit: A number of commit
bb67d09 HEAD@{1}: commit: My commit here
7bf716a HEAD@{2}: commit (initial): My first try on GIT

(HEAD -> master) 像一个指针指向当前,版本操作就是移动这个指针
这就是他的本质

3种方式操作版本
1-基于索引值
    git reset --hard 前面的哈希索引值,就可以了.不管是向前向后都可以
2-使用^符号 只可以往后退
    git reset --hard HEAD^  往后退一步
    git reset --hard HEAD^^  往后退 2 步
3-使用~符号
    git reset --hard HEAD~5 往后退 5 步

关于 git reset --hard/--mixed/--soft

--soft
    在本地库移动指针
--mixed
    在本地库移动指针,重置缓存区
--hard 
    在本地库移动指针,重置缓存区.重置工作区

rm 文件名 删除文件

git 可以通过版本号来找回本地被删除的文件 (回退版本号)

找回删除文件的前提->文件在存在时候已经提交到了本地库!!!


git的比较文件
    git diff 文件名



$ git diff NOTE.txt
diff --git a/NOTE.txt b/NOTE.txt
index b1e3679..786390a 100644
--- a/NOTE.txt
+++ b/NOTE.txt
@@ -130,4 +130,10 @@ bb67d09 HEAD@{1}: commit: My commit here

 rm 文件名 删除文件

-git 可以通过版本号来找回本地被删除的文件 (回退版本号)
\ No newline at end of file
+git 可以通过版本号来找回本地被删除的文件 (回退版本号)
+
+找回删除文件的前提->文件在存在时候已经提交到了本地库!!!
+
+
+git的比较文件
+    git diff 文件名
\ No newline at end of file

其中红色为被删除OR开始改动的那一行
+为添加-为删除

如果没有其他参数则证明没有修改


git diff HEAD 文件名 和指针指向的历史版本进行比较

版本分支:
    分支的操作:
git status
$ git status
On branch master ---在分支 master上
nothing to commit, working tree clean

git branch -v 查看/检查目前处于的分支状态 (绿色为所在分支)

git branch b1 创建 b1 分支

git checkout 分支名字
$ git checkout b1
Switched to branch 'b1'
M       NOTE.txt

提交更改后,会发现以下
$ git branch -v
* b1     8e5c8e3 from b1?
  master 07196a4 111
说明有一个的版本已经变化了(这里是b1)
确保在合并以前提交到本地库

在合并时候必须要处于 接受修改的分支上(被合并的/准备添加新内容的分支上) !!!!

git merge 分支名 执行后就会将分支合并!!!

cat 文件名 查看文件

git 处理冲突 :
出现在合并和被合并的文件都在同一位置做出了修改,git 无法做出决定，所以要求人为处理这一问题
编辑文件，删除特殊符号
同时修改文件
git add 文件名
git commit -m "日志信息" 此时commit不能带文件名